name: 'Run bootc image VM with Ignition'
description: 'A generic workflow to launch a bootc image VM configured with Butane/Ignition and optional post-install steps.'

inputs:
  registry:
    description: 'Registry for the image. Example: ghcr.io/secureblue'
    required: true
  image:
    description: 'Image name for the VM. Example: silverblue-main-hardened'
    required: true
  tests:
    description: 'List of test scripts to execute on the VM via SSH after it boots. Exit code determines test status.'
    required: true
  branch:
    description: 'Image branch'
    default: 'latest'
    required: false
  vm-name:
    description: 'Name for the virtual machine and its disk in libvirt.'
    default: 'vm-bootc'
    required: false
  vcpus:
    description: 'Number of virtual CPUs for the VM. Must be less than the runner CPUs.'
    default: 3
    required: false
  memory-mb:
    description: 'Amount of RAM in MB for the VM. Must be less than the runner memory.'
    default: 8192
    required: false
  disk-size-gb:
    description: 'Size (in GB) of the virtual machine disk. Must be less than runner disk space.'
    default: 20
    required: false
  butane-version:
    description: 'Version of Butane tool to install.'
    default: 'v0.24.0'
    required: false
  butane-spec-version:
    description: 'Version of the Butane/Ignition spec to use in the config file.'
    default: '1.6.0'
    required: false
  vm-ip:
    description: 'Static IP address for the VM on the default 192.168.122.0/24 network.'
    default: '192.168.122.2'
    required: false
  vm-interface:
    description: 'Network interface inside the VM to configure (e.g., enp1s0).'
    default: 'enp1s0'
    required: false
  startup-wait-seconds:
    description: 'Time in seconds to wait after VM startup. Recommended: 180 for complex setups.'
    default: 180
    required: false

runs:
  using: "composite"
  steps:
    - name: Maximize build space
      uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be # v1.3.1

    - name: 'Install Dependencies'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-system-x86 libvirt-daemon-system libvirt-clients virtinst podman apparmor-utils wget libguestfs-tools

    - name: 'Configure Libvirt and AppArmor'
      shell: bash
      run: |
        echo 'owner "/var/lib/libvirt/boot/**" r,' | sudo tee -a /etc/apparmor.d/abstractions/libvirt-qemu
        sudo apparmor_parser -r /etc/apparmor.d/usr.sbin.libvirtd
        sudo systemctl restart libvirtd
        sudo usermod -aG kvm,libvirt "$USER"

    - name: Generate SSH Keypair
      shell: bash
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t ed25519 -N "" -f ~/.ssh/id_ed25519

    - name: 'Create and Start VM'
      shell: bash
      env:
        DISK_SIZE_GB: ${{ inputs.disk-size-gb }}
        IMAGE_PATH: ${{ steps.download_image.outputs.image_path }}
        VM_INTERFACE: ${{ inputs.vm-interface }}
        VM_NAME: ${{ inputs.vm-name }}
        VCPU: ${{ inputs.vcpus }}
        MEMORY_MB: ${{ inputs.memory-mb }}
        IMAGE: ${{ inputs.image }}
        REGISTRY: ${{ inputs.registry }}
        BRANCH: ${{ inputs.branch }}
      run: |
        sudo podman pull "${REGISTRY}/${IMAGE}:${BRANCH}"
        mkdir output
        sudo podman run \
            --rm \
            -it \
            --privileged \
            --pull=newer \
            --security-opt label=type:unconfined_t \
            -v ./output:/output \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            quay.io/centos-bootc/bootc-image-builder:latest \
            --type qcow2 \
            --use-librepo=True \
            --rootfs btrfs \
            "${REGISTRY}/${IMAGE}:${BRANCH}"

        mv output/qcow2/disk.qcow2 /var/lib/libvirt/images/
        DISK_IMAGE_PATH="/var/lib/libvirt/images/disk.qcow2"
        PUBKEY_PATH="$HOME/.ssh/id_ed25519.pub"
        sudo virt-customize -a "$DISK_IMAGE_PATH" \
          --run-command 'useradd -m -G wheel -s /bin/bash core' \
          --mkdir -p /home/core/.ssh \
          --upload "$PUBKEY_PATH":/tmp/id_ed25519.pub \
          --run-command 'cat /tmp/id_ed25519.pub > /home/core/.ssh/authorized_keys' \
          --run-command 'chmod 700 /home/core/.ssh && chmod 600 /home/core/.ssh/authorized_keys' \
          --run-command 'chown -R core:core /home/core/.ssh' \
          --run-command "mkdir -p /etc/NetworkManager/system-connections" \
          --run-command "cat > /etc/NetworkManager/system-connections/static-${VM_INTERFACE}.nmconnection <<EOF
        [connection]
        id=static-${VM_INTERFACE}
        type=ethernet
        interface-name=${VM_INTERFACE}
        [ipv4]
        method=manual
        addresses=${VM_IP}/24
        gateway=192.168.122.1
        dns=1.1.1.1
        [ipv6]
        method=disabled
        EOF
        " \
          --run-command "chmod 600 /etc/NetworkManager/system-connections/static-${VM_INTERFACE}.nmconnection"

        sudo virt-install \
          --connect="qemu:///system" \
          --name="${VM_NAME}" \
          --vcpus="${VCPU}" \
          --memory="${MEMORY_MB}" \
          --import \
          --graphics=none \
          --os-variant="silverblue-unknown" \
          --disk="size=${DISK_SIZE_GB},backing_store=${DISK_IMAGE_PATH}" \
          --network network=default \
          --noautoconsole

    - name: 'Wait for VM Startup'
      if: ${{ inputs.startup-wait-seconds > 0 }}
      env:
        STARTUP_WAIT_SECONDS: ${{ inputs.startup-wait-seconds }}
      shell: bash
      run: |
        echo "Waiting ${STARTUP_WAIT_SECONDS} seconds for the VM to start..."
        sleep "${STARTUP_WAIT_SECONDS}"

    - name: 'Run Tests'
      shell: bash
      env:
        VM_IP: ${{ inputs.vm-ip }}
        TESTS: ${{ inputs.tests }}
      run: |
        echo "Running tests..."

        if [[ -z "$TESTS" ]]; then
          echo "Tests missing..."
          exit 1
        fi

        echo "Waiting for SSH port to be open on ${VM_IP}..."
        for i in {1..30}; do nc -z ${VM_IP} 22 && break || sleep 5; done

        mapfile -t TEST_LIST <<< "$TESTS"
        mkdir test-logs
        FAILED_TESTS=0
        SSH_OPTS="-o ConnectTimeout=20 -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519"

        for TEST_FILE in "${TEST_LIST[@]}"; do
          echo "Running test: $TEST_FILE"
          BASENAME=$(basename "$TEST_FILE")
          REMOTE_PATH="/home/core/${BASENAME}"
          LOG_FILE="test-logs/${BASENAME}.log"

          scp $SSH_OPTS "$TEST_FILE" core@$VM_IP:"$REMOTE_PATH"
          ssh $SSH_OPTS core@$VM_IP "chmod +x $REMOTE_PATH && $REMOTE_PATH" > "$LOG_FILE" 2>&1
          TEST_EXIT_CODE=$?
          if [[ $TEST_EXIT_CODE -ne 0 ]]; then
            echo "Test $TEST_FILE failed"
            (( FAILED_TESTS++ ))
          fi
        done

        if [[ $FAILED_TESTS -gt 0 ]]; then
          exit 1
        fi

    - name: Upload Test Logs
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: test-logs
        path: test-logs/
        retention-days: 7