# Copyright 2025 The Secureblue Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.

name: 'bootc-integration-test-action'
description: 'This action runs integration tests against any bootable container image.'

inputs:
  registry:
    description: 'Registry for the image. Example: ghcr.io/secureblue'
    required: true
  image:
    description: 'Image name for the VM. Example: silverblue-main-hardened'
    required: true
  tests:
    description: 'List of test scripts to execute on the VM via SSH after it boots. Exit code determines test status.'
    required: true
  token:
    description: 'The token used to sign into the container registry.'
    required: true
  data-files:
    description: 'List of data files to be copied to the VM via SSH after it boots.'
    default: ''
    required: false
  vm-name:
    description: 'Name for the virtual machine and its disk in libvirt.'
    default: 'vm-bootc'
    required: false
  vcpus:
    description: 'Number of virtual CPUs for the VM. Must be less than the runner CPUs.'
    default: 3
    required: false
  memory-mb:
    description: 'Amount of RAM in MB for the VM. Must be less than the runner memory.'
    default: 8192
    required: false
  disk-size-gb:
    description: 'Size (in GB) of the virtual machine disk. Must be less than runner disk space.'
    default: 20
    required: false
  startup-wait-seconds:
    description: 'Time in seconds to wait after VM startup. Recommended: 180 for complex setups.'
    default: 180
    required: false

runs:
  using: "composite"
  steps:
    - name: Optimize build times
      shell: bash
      run: |
        echo 'set man-db/auto-update false' | sudo debconf-communicate
        sudo dpkg-reconfigure man-db
        sudo rm -f /var/lib/man-db/auto-update
        sudo sed -i -e 's/^update_initramfs=.*/update_initramfs=no/' /etc/initramfs-tools/update-initramfs.conf

    - name: Free disk space
      shell: bash
      run: |
        sudo find /usr/local/lib/android -delete || true
        sudo find /usr/share/dotnet -delete || true
        sudo find /opt/ghc -delete || true
        sudo find /usr/local/.ghcup -delete || true
        sudo apt-get -y --ignore-missing --autoremove remove '^aspnetcore-.*' '^dotnet-.*' '^llvm-.*' 'php.*' '^mongodb-.*' '^mysql-.*' azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri google-cloud-sdk google-cloud-cli || true
        sudo apt-get clean || true
        sudo docker image prune --all --force > /dev/null || true
        sudo find "$AGENT_TOOLSDIRECTORY" -delete || true
        sudo swapoff -a || true
        sudo rm -f /mnt/swapfile || true

    - name: Checkout repository
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false
        repository: secureblue/bootc-integration-test-action
        path: bootc-integration-test-action

    - uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
      with:
        install-dir: /usr/bin
        use-sudo: true

    - name: 'Install Dependencies'
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y passt qemu-system-x86 libvirt-daemon-system libvirt-clients virtinst podman apparmor-utils wget libguestfs-tools

    - name: Install BlueBuild
      shell: bash
      run: |
        docker pull --quiet ghcr.io/blue-build/cli:v0.9.20-installer
        docker create \
          --name blue-build-installer \
          ghcr.io/blue-build/cli:v0.9.20-installer
        docker cp blue-build-installer:/out/bluebuild /usr/local/bin/bluebuild
        docker rm blue-build-installer
        bluebuild --version

    - name: 'Configure Libvirt and AppArmor'
      shell: bash
      run: |
        echo 'owner "/var/lib/libvirt/boot/**" r,' | sudo tee -a /etc/apparmor.d/abstractions/libvirt-qemu
        sudo apparmor_parser -r /etc/apparmor.d/usr.sbin.libvirtd
        sudo systemctl restart libvirtd
        sudo usermod -aG kvm,libvirt "$USER"

    - name: Generate SSH Keypair
      shell: bash
      run: |
        mkdir -p ~/.ssh
        ssh-keygen -t ed25519 -N "" -f ~/.ssh/id_ed25519

    - name: Build integration test image
      shell: bash
      id: build_test_image
      working-directory: ${{ inputs.working_directory }}
      env:
        RUST_LOG_STYLE: always
        CLICOLOR_FORCE: '1'
        GH_PR_EVENT_NUMBER: ${{ github.event.number }}
        IMAGE: ${{ inputs.image }}
        REGISTRY: ${{ inputs.registry }}
        GH_TOKEN: ${{ inputs.token }}
        BB_PASSWORD: ${{ inputs.token }}
      run: |
        cd ./bootc-integration-test-action
        RECIPE_PATH=./recipe.yml

        cosign generate-key-pair
        COSIGN_PRIVATE_KEY=$(< cosign.key)

        TESTUUID=$(uuidgen)

        sed -i --sandbox -e "s|%%IMAGE%%|${IMAGE}|g" "${RECIPE_PATH}"
        sed -i --sandbox -e "s|%%REGISTRY%%|${REGISTRY}|g" "${RECIPE_PATH}"
        sed -i --sandbox -e "s|%%TESTUUID%%|${TESTUUID}|g" "${RECIPE_PATH}"

        BUILD_OPTS="--build-driver podman --push --squash"
        bluebuild build -v ${BUILD_OPTS} "${RECIPE_PATH}"
        INTEGRATION_TEST_TAG="integrationtest-${TESTUUID}"
        echo "integration_test_tag=${INTEGRATION_TEST_TAG}" >> "${GITHUB_OUTPUT}"

    - name: 'Create and Start VM'
      shell: bash
      env:
        DISK_SIZE_GB: ${{ inputs.disk-size-gb }}
        VM_NAME: ${{ inputs.vm-name }}
        VCPU: ${{ inputs.vcpus }}
        MEMORY_MB: ${{ inputs.memory-mb }}
        IMAGE: ${{ inputs.image }}
        REGISTRY: ${{ inputs.registry }}
        INTEGRATION_TEST_TAG: ${{ steps.build_test_image.outputs.integration_test_tag }}
      run: |
        INTEGRATION_TEST_IMAGE="${REGISTRY}/${IMAGE}:${INTEGRATION_TEST_TAG}"
        sudo podman pull "$INTEGRATION_TEST_IMAGE"
        mkdir output

        PUBKEY=$(cat ~/.ssh/id_ed25519.pub)
        mv "./bootc-integration-test-action/config.toml" .
        sed -i --sandbox -e "s|%%PUBKEY%%|${PUBKEY}|g" ./config.toml
        sudo podman run \
            --rm \
            -it \
            --privileged \
            --pull=newer \
            --security-opt label=type:unconfined_t \
            -v ./output:/output \
            -v ./config.toml:/config.toml:ro \
            -v /var/lib/containers/storage:/var/lib/containers/storage \
            quay.io/centos-bootc/bootc-image-builder:latest \
            --type qcow2 \
            --use-librepo=True \
            --rootfs btrfs \
            --progress verbose \
            "$INTEGRATION_TEST_IMAGE"

        sudo mv output/qcow2/disk.qcow2 /var/lib/libvirt/images/
        DISK_IMAGE_PATH="/var/lib/libvirt/images/disk.qcow2"

        sudo virt-install \
          --connect="qemu:///system" \
          --name="${VM_NAME}" \
          --vcpus="${VCPU}" \
          --memory="${MEMORY_MB}" \
          --import \
          --graphics=none \
          --os-variant="silverblue-unknown" \
          --disk="size=${DISK_SIZE_GB},backing_store=${DISK_IMAGE_PATH}" \
          --network network=default \
          --noautoconsole

    - name: 'Wait for VM Startup'
      if: ${{ inputs.startup-wait-seconds > 0 }}
      env:
        STARTUP_WAIT_SECONDS: ${{ inputs.startup-wait-seconds }}
      shell: bash
      run: |
        echo "Waiting ${STARTUP_WAIT_SECONDS} seconds for the VM to start..."
        sleep "${STARTUP_WAIT_SECONDS}"

    - name: 'Run Tests'
      shell: bash
      env:
        TESTS: ${{ inputs.tests }}
        DATA_FILES: ${{ inputs.data-files }}
      run: |
        echo "Running tests..."

        if [[ -z "$TESTS" ]]; then
          echo "Tests missing..."
          exit 1
        fi

        VM_IP="192.168.122.2"
        echo "Waiting for SSH port to be open on ${VM_IP}..."
        for i in {1..30}; do nc -z "${VM_IP}" 22 && break || sleep 5; done

        mapfile -t TEST_LIST < <(echo "$TESTS" | sed '/^[[:space:]]*$/d')
        mkdir test-logs
        SSH_OPTS="-o ConnectTimeout=20 -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519"

        if [ -n "$DATA_FILES" ]; then
          mapfile -t DATA_FILE_LIST < <(echo "$DATA_FILES" | sed '/^[[:space:]]*$/d')
          scp $SSH_OPTS "${DATA_FILE_LIST[@]}" core@"$VM_IP":/home/core/
        fi

        FAILED_TESTS=0
        for TEST_FILE in "${TEST_LIST[@]}"; do
          echo "Running test: $TEST_FILE"
          BASENAME="${TEST_FILE##*/}"
          REMOTE_PATH="/home/core/${BASENAME}"
          LOG_FILE="test-logs/${BASENAME}.log"

          scp $SSH_OPTS "$TEST_FILE" core@$VM_IP:"$REMOTE_PATH"
          set +e
          ssh $SSH_OPTS core@"$VM_IP" "chmod +x $REMOTE_PATH && $REMOTE_PATH" > "$LOG_FILE" 2>&1
          TEST_EXIT_CODE=$?
          set -e
          if (( TEST_EXIT_CODE != 0 )); then
            echo "Test $TEST_FILE failed"
            (( ++FAILED_TESTS ))
          fi
        done

        if (( $FAILED_TESTS > 0 )); then
          exit 1
        fi

    - name: Cleanup integration test image
      if: startsWith(steps.build_test_image.outputs.integration_test_tag, 'integrationtest-')
      uses: dataaxiom/ghcr-cleanup-action@cd0cdb900b5dbf3a6f2cc869f0dbb0b8211f50c4 # v1.0.16
      with:
        token: ${{ inputs.token }}
        packages: ${{ inputs.image }}
        delete-tags: ${{ format('*{0}*', steps.build_test_image.outputs.integration_test_tag) }}

    - name: Upload Test Logs
      if: always()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: test-logs
        path: test-logs/
        retention-days: 7
